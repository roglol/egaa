{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport axios from 'axios';\nimport Router from 'next/router';\nimport { Cookies } from 'react-cookie'; // set up cookies\n\nvar cookies = new Cookies();\nvar serverUrl = 'http://localhost:3001';\nexport function handleAuthSSR(ctx) {\n  var token, response;\n  return _regeneratorRuntime.async(function handleAuthSSR$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          token = null; // if context has request info aka Server Side\n          // if (ctx.req) {\n          // ugly way to get cookie value from a string of values\n          // good enough for demostration\n          //   token = ctx.req.headers.cookie.replace(/(?:(?:^|.*;\\s*)token\\s*\\=\\s*([^;]*).*$)|^.*$/, \"$1\");\n          // }\n          // else {\n          // we dont have request info aka Client Side\n\n          token = cookies.get('token'); // }\n\n          _context.prev = 2;\n          console.log('vaimee');\n          _context.next = 6;\n          return _regeneratorRuntime.awrap(axios.get(serverUrl + \"/api/token/ping\", {\n            headers: {\n              'Authorization': token\n            }\n          }));\n\n        case 6:\n          response = _context.sent;\n          // dont really care about response, as long as it not an error\n          console.log(\"token ping:\", response.data.msg);\n          _context.next = 15;\n          break;\n\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](2);\n          // in case of error\n          console.log(_context.t0.response.data.msg);\n          console.log(\"redirecting back to main page\"); // redirect to login\n\n          if (ctx.res) {\n            ctx.res.writeHead(302, {\n              Location: '/'\n            });\n            ctx.res.end();\n          } else {\n            Router.push('/');\n          }\n\n        case 15:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[2, 10]]);\n}","map":{"version":3,"sources":["C:/Users/Roglol/Desktop/dekori/utils/auth.js"],"names":["axios","Router","Cookies","cookies","serverUrl","handleAuthSSR","ctx","token","get","console","log","headers","response","data","msg","res","writeHead","Location","end","push"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,SAASC,OAAT,QAAwB,cAAxB,C,CACA;;AACA,IAAMC,OAAO,GAAG,IAAID,OAAJ,EAAhB;AACA,IAAME,SAAS,GAAG,uBAAlB;AAEA,OAAO,SAAeC,aAAf,CAA6BC,GAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AACDC,UAAAA,KADC,GACO,IADP,EAGL;AACA;AACE;AACA;AACF;AACA;AACA;AACE;;AACAA,UAAAA,KAAK,GAAGJ,OAAO,CAACK,GAAR,CAAY,OAAZ,CAAR,CAXG,CAYL;;AAZK;AAeHC,UAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AAfG;AAAA,2CAgBoBV,KAAK,CAACQ,GAAN,CAAUJ,SAAS,GAAG,iBAAtB,EAAyC;AAAEO,YAAAA,OAAO,EAAE;AAAE,+BAAiBJ;AAAnB;AAAX,WAAzC,CAhBpB;;AAAA;AAgBGK,UAAAA,QAhBH;AAiBH;AACAH,UAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BE,QAAQ,CAACC,IAAT,CAAcC,GAAzC;AAlBG;AAAA;;AAAA;AAAA;AAAA;AAoBH;AACAL,UAAAA,OAAO,CAACC,GAAR,CAAY,YAAIE,QAAJ,CAAaC,IAAb,CAAkBC,GAA9B;AACAL,UAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ,EAtBG,CAuBH;;AACA,cAAIJ,GAAG,CAACS,GAAR,EAAa;AACXT,YAAAA,GAAG,CAACS,GAAJ,CAAQC,SAAR,CAAkB,GAAlB,EAAuB;AACrBC,cAAAA,QAAQ,EAAE;AADW,aAAvB;AAGAX,YAAAA,GAAG,CAACS,GAAJ,CAAQG,GAAR;AACD,WALD,MAKO;AACLjB,YAAAA,MAAM,CAACkB,IAAP,CAAY,GAAZ;AACD;;AA/BE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import axios from 'axios';\r\nimport Router from 'next/router';\r\nimport { Cookies } from 'react-cookie';\r\n// set up cookies\r\nconst cookies = new Cookies();\r\nconst serverUrl = 'http://localhost:3001';\r\n\r\nexport async function handleAuthSSR(ctx) {\r\n  let token = null;\r\n\r\n  // if context has request info aka Server Side\r\n  // if (ctx.req) {\r\n    // ugly way to get cookie value from a string of values\r\n    // good enough for demostration\r\n  //   token = ctx.req.headers.cookie.replace(/(?:(?:^|.*;\\s*)token\\s*\\=\\s*([^;]*).*$)|^.*$/, \"$1\");\r\n  // }\r\n  // else {\r\n    // we dont have request info aka Client Side\r\n    token = cookies.get('token')\r\n  // }\r\n\r\n  try {\r\n    console.log('vaimee')\r\n    const response = await axios.get(serverUrl + \"/api/token/ping\", { headers: { 'Authorization': token } });\r\n    // dont really care about response, as long as it not an error\r\n    console.log(\"token ping:\", response.data.msg)\r\n  } catch (err) {\r\n    // in case of error\r\n    console.log(err.response.data.msg);\r\n    console.log(\"redirecting back to main page\");\r\n    // redirect to login\r\n    if (ctx.res) {\r\n      ctx.res.writeHead(302, {\r\n        Location: '/'\r\n      })\r\n      ctx.res.end()\r\n    } else {\r\n      Router.push('/')\r\n    }\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}