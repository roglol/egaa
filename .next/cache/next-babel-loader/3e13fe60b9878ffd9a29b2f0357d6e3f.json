{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport axios from 'axios';\nimport Router from 'next/router';\nimport { Cookies } from 'react-cookie'; // set up cookies\n\nvar cookies = new Cookies();\nvar serverUrl = 'http://localhost:3001';\nexport function handleAuthSSR(ctx) {\n  var token, response;\n  return _regeneratorRuntime.async(function handleAuthSSR$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          token = null; // if context has request info aka Server Side\n\n          if (ctx.req) {\n            // ugly way to get cookie value from a string of values\n            // good enough for demostration\n            token = ctx.req.headers.cookie.replace(/(?:(?:^|.*;\\s*)token\\s*\\=\\s*([^;]*).*$)|^.*$/, \"$1\");\n          } else {\n            // we dont have request info aka Client Side\n            token = cookies.get('token');\n          }\n\n          _context.prev = 2;\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(axios.get(serverUrl + \"/api/token/ping\", {\n            headers: {\n              'Authorization': token\n            }\n          }));\n\n        case 5:\n          response = _context.sent;\n          // dont really care about response, as long as it not an error\n          console.log(\"token ping:\", response.data.msg);\n          _context.next = 14;\n          break;\n\n        case 9:\n          _context.prev = 9;\n          _context.t0 = _context[\"catch\"](2);\n          // in case of error\n          console.log(_context.t0.response.data.msg);\n          console.log(\"redirecting back to main page\"); // redirect to login\n\n          if (ctx.res) {\n            ctx.res.writeHead(302, {\n              Location: '/'\n            });\n            ctx.res.end();\n          } else {\n            Router.push('/');\n          }\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[2, 9]]);\n}","map":{"version":3,"sources":["C:/Users/Roglol/Desktop/dekori/utils/auth.js"],"names":["axios","Router","Cookies","cookies","serverUrl","handleAuthSSR","ctx","token","req","headers","cookie","replace","get","response","console","log","data","msg","res","writeHead","Location","end","push"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,SAASC,OAAT,QAAwB,cAAxB,C,CACA;;AACA,IAAMC,OAAO,GAAG,IAAID,OAAJ,EAAhB;AACA,IAAME,SAAS,GAAG,uBAAlB;AAEA,OAAO,SAAeC,aAAf,CAA6BC,GAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AACDC,UAAAA,KADC,GACO,IADP,EAGL;;AACA,cAAID,GAAG,CAACE,GAAR,EAAa;AACX;AACA;AACAD,YAAAA,KAAK,GAAGD,GAAG,CAACE,GAAJ,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAA+B,8CAA/B,EAA+E,IAA/E,CAAR;AACD,WAJD,MAKK;AACH;AACAJ,YAAAA,KAAK,GAAGJ,OAAO,CAACS,GAAR,CAAY,OAAZ,CAAR;AACD;;AAZI;AAAA;AAAA,2CAeoBZ,KAAK,CAACY,GAAN,CAAUR,SAAS,GAAG,iBAAtB,EAAyC;AAAEK,YAAAA,OAAO,EAAE;AAAE,+BAAiBF;AAAnB;AAAX,WAAzC,CAfpB;;AAAA;AAeGM,UAAAA,QAfH;AAgBH;AACAC,UAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BF,QAAQ,CAACG,IAAT,CAAcC,GAAzC;AAjBG;AAAA;;AAAA;AAAA;AAAA;AAmBH;AACAH,UAAAA,OAAO,CAACC,GAAR,CAAY,YAAIF,QAAJ,CAAaG,IAAb,CAAkBC,GAA9B;AACAH,UAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ,EArBG,CAsBH;;AACA,cAAIT,GAAG,CAACY,GAAR,EAAa;AACXZ,YAAAA,GAAG,CAACY,GAAJ,CAAQC,SAAR,CAAkB,GAAlB,EAAuB;AACrBC,cAAAA,QAAQ,EAAE;AADW,aAAvB;AAGAd,YAAAA,GAAG,CAACY,GAAJ,CAAQG,GAAR;AACD,WALD,MAKO;AACLpB,YAAAA,MAAM,CAACqB,IAAP,CAAY,GAAZ;AACD;;AA9BE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import axios from 'axios';\r\nimport Router from 'next/router';\r\nimport { Cookies } from 'react-cookie';\r\n// set up cookies\r\nconst cookies = new Cookies();\r\nconst serverUrl = 'http://localhost:3001';\r\n\r\nexport async function handleAuthSSR(ctx) {\r\n  let token = null;\r\n\r\n  // if context has request info aka Server Side\r\n  if (ctx.req) {\r\n    // ugly way to get cookie value from a string of values\r\n    // good enough for demostration\r\n    token = ctx.req.headers.cookie.replace(/(?:(?:^|.*;\\s*)token\\s*\\=\\s*([^;]*).*$)|^.*$/, \"$1\");\r\n  }\r\n  else {\r\n    // we dont have request info aka Client Side\r\n    token = cookies.get('token')\r\n  }\r\n\r\n  try {\r\n    const response = await axios.get(serverUrl + \"/api/token/ping\", { headers: { 'Authorization': token } });\r\n    // dont really care about response, as long as it not an error\r\n    console.log(\"token ping:\", response.data.msg)\r\n  } catch (err) {\r\n    // in case of error\r\n    console.log(err.response.data.msg);\r\n    console.log(\"redirecting back to main page\");\r\n    // redirect to login\r\n    if (ctx.res) {\r\n      ctx.res.writeHead(302, {\r\n        Location: '/'\r\n      })\r\n      ctx.res.end()\r\n    } else {\r\n      Router.push('/')\r\n    }\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}