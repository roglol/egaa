{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport axios from 'axios';\nimport { Cookies } from 'react-cookie';\nimport { handleAuthSSR } from '../utils/auth';\nvar serverUrl = 'http://localhost:3001'; // set up cookies\n\nvar cookies = new Cookies();\n\nvar Secret =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Secret, _React$Component);\n\n  function Secret() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Secret);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Secret)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"onPingCall\", function _callee(e) {\n      var token, res;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              token = cookies.get('token');\n              _context.prev = 1;\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(axios.get(serverUrl + '/api/ping', {\n                headers: {\n                  'Authorization': token\n                }\n              }));\n\n            case 4:\n              res = _context.sent;\n              console.log(res.data.msg);\n              _context.next = 11;\n              break;\n\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](1);\n              console.log(_context.t0.response.data.msg);\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[1, 8]]);\n    });\n\n    return _this;\n  }\n\n  _createClass(Secret, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return __jsx(\"div\", null, __jsx(\"h2\", null, \"Secret page\"), __jsx(\"p\", null, \"Only accessible via a valid JWT\"), __jsx(\"br\", null), __jsx(\"button\", {\n        onClick: function onClick(e) {\n          return _this2.onPingCall(e);\n        }\n      }, \"Ping Call\"), __jsx(\"p\", null, \"Check console for response\"));\n    }\n  }]);\n\n  return Secret;\n}(React.Component); // Server-Side Rendering\n\n\nSecret.getInitialProps = function _callee2(ctx) {\n  return _regeneratorRuntime.async(function _callee2$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(handleAuthSSR(ctx));\n\n        case 2:\n          return _context2.abrupt(\"return\", {});\n\n        case 3:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  });\n};\n\nexport default Secret;","map":{"version":3,"sources":["C:/Users/Roglol/Desktop/dekori/pages/secret.js"],"names":["React","axios","Cookies","handleAuthSSR","serverUrl","cookies","Secret","e","token","get","headers","res","console","log","data","msg","response","onPingCall","Component","getInitialProps","ctx"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,SAASC,aAAT,QAA8B,eAA9B;AAEA,IAAMC,SAAS,GAAG,uBAAlB,C,CAEA;;AACA,IAAMC,OAAO,GAAG,IAAIH,OAAJ,EAAhB;;IAEMI,M;;;;;;;;;;;;;;;;;;iEAES,iBAAOC,CAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACLC,cAAAA,KADK,GACGH,OAAO,CAACI,GAAR,CAAY,OAAZ,CADH;AAAA;AAAA;AAAA,+CAISR,KAAK,CAACQ,GAAN,CAAUL,SAAS,GAAG,WAAtB,EAAmC;AAAEM,gBAAAA,OAAO,EAAE;AAAE,mCAAiBF;AAAnB;AAAX,eAAnC,CAJT;;AAAA;AAIHG,cAAAA,GAJG;AAKTC,cAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,IAAJ,CAASC,GAArB;AALS;AAAA;;AAAA;AAAA;AAAA;AAOTH,cAAAA,OAAO,CAACC,GAAR,CAAY,YAAIG,QAAJ,CAAaF,IAAb,CAAkBC,GAA9B;;AAPS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;;;;;;6BAWJ;AAAA;;AACP,aACE,mBACE,gCADF,EAEE,mDAFF,EAGE,iBAHF,EAIE;AAAQ,QAAA,OAAO,EAAE,iBAACR,CAAD;AAAA,iBAAO,MAAI,CAACU,UAAL,CAAgBV,CAAhB,CAAP;AAAA;AAAjB,qBAJF,EAKE,8CALF,CADF;AASD;;;;EAvBkBP,KAAK,CAACkB,S,GA0B3B;;;AACAZ,MAAM,CAACa,eAAP,GAAyB,kBAAOC,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAKjBjB,aAAa,CAACiB,GAAD,CALI;;AAAA;AAAA,4CAQhB,EARgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAzB;;AAWA,eAAed,MAAf","sourcesContent":["import React from 'react';\r\nimport axios from 'axios';\r\nimport { Cookies } from 'react-cookie';\r\nimport { handleAuthSSR } from '../utils/auth';\r\n\r\nconst serverUrl = 'http://localhost:3001';\r\n\r\n// set up cookies\r\nconst cookies = new Cookies();\r\n\r\nclass Secret extends React.Component {\r\n\r\n  onPingCall = async (e) => {\r\n    const token = cookies.get('token')\r\n\r\n    try {\r\n      const res = await axios.get(serverUrl + '/api/ping', { headers: { 'Authorization': token } });\r\n      console.log(res.data.msg);\r\n    } catch (err) {\r\n      console.log(err.response.data.msg);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h2>Secret page</h2>\r\n        <p>Only accessible via a valid JWT</p>\r\n        <br></br>\r\n        <button onClick={(e) => this.onPingCall(e)}>Ping Call</button>\r\n        <p>Check console for response</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// Server-Side Rendering\r\nSecret.getInitialProps = async (ctx) => {\r\n  // Must validate JWT\r\n  // If the JWT is invalid it must redirect\r\n  // back to the main page. You can do that\r\n  // with Router from 'next/router\r\n  await handleAuthSSR(ctx);\r\n\r\n  // Must return an object\r\n  return {}\r\n}\r\n\r\nexport default Secret;"]},"metadata":{},"sourceType":"module"}